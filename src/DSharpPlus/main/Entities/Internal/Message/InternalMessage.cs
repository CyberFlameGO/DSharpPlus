using System;
using System.Collections.Generic;
using DSharpPlus.Core.Attributes;
using DSharpPlus.Core.Enums;
using System.Text.Json.Serialization;

namespace DSharpPlus.Core.Entities
{
    [InternalGatewayPayload("MESSAGE_CREATE", "MESSAGE_UPDATE")]
    public sealed record InternalMessage
    {
        /// <summary>
        /// The id of the message.
        /// </summary>
        [JsonPropertyName("id")]
        public InternalSnowflake Id { get; init; } = null!;

        /// <summary>
        /// The id of the channel the message was sent in.
        /// </summary>
        [JsonPropertyName("channel_id")]
        public InternalSnowflake ChannelId { get; init; } = null!;

        /// <summary>
        /// The author of this message (not guaranteed to be a valid user, see below).
        /// </summary>
        /// <remarks>
        /// The author object follows the structure of the user object, but is only a valid user in the case where the message is generated by a user or bot user. If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar. You can tell if a message is generated by a webhook by checking the value of <see cref="WebhookId"/>.
        /// </remarks>
        [JsonPropertyName("author")]
        public InternalUser Author { get; init; } = null!;

        /// <summary>
        /// The contents of the message.
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; init; } = null!;

        /// <summary>
        /// When this message was sent.
        /// </summary>
        [JsonPropertyName("timestamp")]
        public DateTimeOffset Timestamp { get; init; }

        /// <summary>
        /// When this message was edited (or <see langword="null"/> if never).
        /// </summary>
        [JsonPropertyName("edited_timestamp")]
        public DateTimeOffset? EditedTimestamp { get; init; }

        /// <summary>
        /// Whether this was a TTS message.
        /// </summary>
        [JsonPropertyName("tts")]
        public bool TTS { get; init; }

        /// <summary>
        /// Whether this message mentions everyone.
        /// </summary>
        [JsonPropertyName("mention_everyone")]
        public bool MentionEveryone { get; init; }

        /// <summary>
        /// The users specifically mentioned in the message with an additional partial member field.
        /// </summary>
        [JsonPropertyName("mentions")]
        public IReadOnlyList<InternalUser> Mentions { get; init; } = Array.Empty<InternalUser>();

        /// <summary>
        /// The roles specifically mentioned in this message.
        /// </summary>
        [JsonPropertyName("mention_roles")]
        public IReadOnlyList<InternalRole> MentionRoles { get; init; } = Array.Empty<InternalRole>();

        /// <summary>
        /// The channels specifically mentioned in this message.
        /// </summary>
        [JsonPropertyName("mention_channels")]
        public Optional<IReadOnlyList<InternalChannel>> MentionChannels { get; init; }

        /// <summary>
        /// The attached files.
        /// </summary>
        [JsonPropertyName("attachments")]
        public IReadOnlyList<InternalAttachment> Attachments { get; init; } = Array.Empty<InternalAttachment>();

        /// <summary>
        /// The embedded content.
        /// </summary>
        [JsonPropertyName("embeds")]
        public IReadOnlyList<InternalEmbed> Embeds { get; init; } = Array.Empty<InternalEmbed>();

        /// <summary>
        /// The reactions to the message.
        /// </summary>
        [JsonPropertyName("reactions")]
        public Optional<IReadOnlyList<InternalReaction>> Reactions { get; init; }

        /// <summary>
        /// Used for validating a message was sent.
        /// </summary>
        /// <remarks>
        /// Can be an integer or string.
        /// </remarks>
        [JsonPropertyName("nonce")]
        public Optional<object> Nonce { get; init; }

        /// <summary>
        /// Whether this message is pinned.
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool Pinned { get; init; }

        /// <summary>
        /// If the message is generated by a webhook, this is the webhook's id.
        /// </summary>
        [JsonPropertyName("webhook_id")]
        public Optional<InternalSnowflake> WebhookId { get; init; }

        /// <summary>
        /// The type of message.
        /// </summary>
        [JsonPropertyName("type")]
        public InternalMessageType Type { get; init; }

        /// <summary>
        /// Sent with Rich Presence-related chat embeds.
        /// </summary>
        [JsonPropertyName("activity")]
        public Optional<InternalMessageActivity> Activity { get; init; }

        /// <summary>
        /// Sent with Rich Presence-related chat embeds.
        /// </summary>
        [JsonPropertyName("application")]
        public Optional<InternalApplication> Application { get; init; }

        /// <summary>
        /// If the message is an Interaction or application-owned webhook, this is the id of the application.
        /// </summary>
        [JsonPropertyName("application_id")]
        public Optional<InternalSnowflake> ApplicationId { get; init; }

        /// <summary>
        /// The data showing the source of a crosspost, channel follow add, pin, or reply message.
        /// </summary>
        [JsonPropertyName("message_reference")]
        public Optional<InternalMessageReference> MessageReference { get; init; }

        /// <summary>
        /// The message flags combined as a bitfield.
        /// </summary>
        [JsonPropertyName("flags")]
        public Optional<InternalMessageFlags> Flags { get; init; }

        /// <summary>
        /// The message associated with <see cref="MessageReference"/>.
        /// </summary>
        [JsonPropertyName("referenced_message")]
        public Optional<InternalMessage?> ReferencedMessage { get; init; }

        /// <summary>
        /// Sent if the message is a response to an Interaction.
        /// </summary>
        [JsonPropertyName("interaction")]
        public Optional<InternalMessageInteraction> Interaction { get; init; }

        /// <summary>
        /// The thread that was started from this message. Includes thread member object.
        /// </summary>
        [JsonPropertyName("thread")]
        public Optional<InternalChannel> Thread { get; init; }

        /// <summary>
        /// Sent if the message contains components like buttons, action rows, or other interactive components.
        /// </summary>
        [JsonPropertyName("components")]
        public Optional<IReadOnlyList<IInternalMessageComponent>> Components { get; init; }

        /// <summary>
        /// Sent if the message contains stickers.
        /// </summary>
        [JsonPropertyName("sticker_items")]
        public Optional<IReadOnlyList<InternalMessageStickerItem>> StickerItems { get; init; }

        /// <summary>
        /// Deprecated. The stickers sent with the message
        /// </summary>
        [JsonPropertyName("stickers")]
        [Obsolete("This property is deprecated and will be removed in a future version. Use StickerItems instead.")]
        public Optional<IReadOnlyList<InternalSticker>> Stickers { get; init; }

        /// <summary>
        /// The id of the guild the message was sent in.
        /// </summary>
        /// <remarks>
        /// For MESSAGE_CREATE and MESSAGE_UPDATE events, the message object may not contain a guild_id or member field since the events are sent directly to the receiving user and the bot who sent the message, rather than being sent through the guild like non-ephemeral messages.
        /// </remarks>
        [JsonPropertyName("guild_id")]
        public Optional<InternalSnowflake> GuildId { get; init; }

        /// <summary>
        ///The member properties for this message's author.
        /// </summary>
        /// <remarks>
        /// The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based guild channels, provided that the message isn't ephemeral and the author of the message is not a webhook. This allows bots to obtain real-time member data without requiring bots to store member state in memory.
        /// </remarks>
        [JsonPropertyName("member")]
        public Optional<InternalGuildMember> Member { get; init; }
    }
}
